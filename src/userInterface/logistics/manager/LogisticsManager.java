/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInterface.logistics.manager;

import business.DB4OUtil.DB4OUtil;
import business.EcoSystem;
import business.enterprise.ConsumerEnterprise;
import business.enterprise.Enterprise;
import business.network.Network;
import business.organization.Organization;
import business.organization.consumer.ConsumerManagerOrganization;
import business.role.Role;
import business.userAccount.UserAccount;
import business.util.request.RequestStatus;
import static business.util.request.RequestStatus.pickupRequestStatusList;
import business.workQueue.CollectionWorkRequest;
import business.workQueue.PaymentWorkRequest;
import business.workQueue.WorkRequest;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Arpit
 */
public class LogisticsManager extends javax.swing.JPanel {

    /**
     * Creates new form LogisticsManager
     */
    
    //VIEW DETAILS PENDING
    private JPanel mainPanel;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private Network network;
    private EcoSystem business;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    public LogisticsManager(JPanel mainPanel, UserAccount account, Organization organization, Enterprise enterprise, Network network, EcoSystem business) {
        initComponents();
        business = dB4OUtil.retrieveSystem();
        this.mainPanel = mainPanel;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.network = network;
       
        populateTable();
        populateComboBox();
        
        //Work log
        populateTableWorkLog();
        
        //Invoices
        populateComboBoxInvoices();
        populateChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnAssigntoEmployee = new javax.swing.JButton();
        cmbWorker = new javax.swing.JComboBox();
        lblWorker = new javax.swing.JLabel();
        btnDetails = new javax.swing.JButton();
        lblHeader1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequests = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        lblHeader2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRequests1 = new javax.swing.JTable();
        btnViewDetails = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        cmbConsumer = new javax.swing.JComboBox();
        btnGenerateAll = new javax.swing.JButton();
        btnGenerateInovice = new javax.swing.JButton();
        lblHeader = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        tblDetails = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        lblHeader3 = new javax.swing.JLabel();
        lblPaid = new javax.swing.JLabel();
        lblPaidVal = new javax.swing.JLabel();
        lblUnPaid = new javax.swing.JLabel();
        lblUnPaidVal = new javax.swing.JLabel();
        pnlChart = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(1000, 1000));

        btnAssigntoEmployee.setText("Assign to Employee");
        btnAssigntoEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigntoEmployeeActionPerformed(evt);
            }
        });

        cmbWorker.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblWorker.setText("Worker:");

        btnDetails.setText("View Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        lblHeader1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeader1.setText("Logistics Manager Work Area - Requests");

        tblRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request from", "Pickup", "Drop", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequests);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(550, 550, 550)
                            .addComponent(btnDetails))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(lblWorker)
                            .addGap(18, 18, 18)
                            .addComponent(cmbWorker, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnAssigntoEmployee))))
                .addContainerGap(212, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lblHeader1)
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbWorker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWorker)
                    .addComponent(btnAssigntoEmployee))
                .addGap(37, 37, 37)
                .addComponent(btnDetails)
                .addContainerGap(422, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Work Requests", jPanel1);

        lblHeader2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeader2.setText("Logistics Manager Work Area - Work Log");

        tblRequests1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request from", "Pickup", "Drop", "Employee Assigned To", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblRequests1);

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeader2, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 819, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(731, 731, 731)
                        .addComponent(btnViewDetails)))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(lblHeader2)
                .addGap(49, 49, 49)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108)
                .addComponent(btnViewDetails)
                .addContainerGap(418, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Work Log", jPanel2);

        lblName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblName.setText("NGO Name:");

        cmbConsumer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbConsumerActionPerformed(evt);
            }
        });

        btnGenerateAll.setText("Generate All Invoices");
        btnGenerateAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateAllActionPerformed(evt);
            }
        });

        btnGenerateInovice.setText("Generate Invoice");
        btnGenerateInovice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateInoviceActionPerformed(evt);
            }
        });

        lblHeader.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeader.setText("Logistics Manager Work Area - Generate Invoices");

        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job Completion Date", "Request Status", "Cost", "Invoice Generated", "Paid"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(tblDetails);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbConsumer, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(277, 277, 277)
                                .addComponent(btnGenerateAll)
                                .addGap(28, 28, 28)
                                .addComponent(btnGenerateInovice, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3))
                    .addComponent(lblHeader, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(229, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(lblHeader)
                .addGap(49, 49, 49)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(cmbConsumer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerateInovice)
                    .addComponent(btnGenerateAll))
                .addContainerGap(409, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Generate Invoices", jPanel3);

        lblHeader3.setBackground(new java.awt.Color(204, 204, 255));
        lblHeader3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeader3.setText("Logistics Manager - View Invoice Payement Status");

        lblPaid.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPaid.setText("Total Amount Received (Paid) :");

        lblPaidVal.setText("<paid>");

        lblUnPaid.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblUnPaid.setText("Total Amount Pending (Un-Paid) :");

        lblUnPaidVal.setText("<un-paid>");

        pnlChart.setBackground(new java.awt.Color(255, 255, 204));
        pnlChart.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlChart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblUnPaid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPaidVal, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUnPaidVal, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblHeader3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(lblHeader3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPaidVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUnPaid)
                    .addComponent(lblUnPaidVal))
                .addGap(8, 8, 8)
                .addComponent(pnlChart, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                .addGap(163, 163, 163))
        );

        jTabbedPane1.addTab("Payment Info", jPanel4);

        btnLogout.setText("Logout");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(btnLogout)
                .addGap(63, 63, 63)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbConsumerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbConsumerActionPerformed
        // TODO add your handling code here:
        ConsumerEnterprise consumer = (ConsumerEnterprise) cmbConsumer.getSelectedItem();
        if (consumer != null) {
            populateTableDetails(consumer);
        }
    }//GEN-LAST:event_cmbConsumerActionPerformed

    private void btnGenerateAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateAllActionPerformed

        ConsumerEnterprise consumer = (ConsumerEnterprise) cmbConsumer.getSelectedItem();
        boolean generated = false;

        for (int i = 0; i < tblDetails.getRowCount(); i++) {
            WorkRequest wr = (WorkRequest) tblDetails.getValueAt(i, 1);
            if (wr instanceof CollectionWorkRequest) {
                CollectionWorkRequest cwr = (CollectionWorkRequest) wr;
                if (!cwr.getPaid() && !cwr.getInvoiceGenerated()) {
                    generated = true;

                    PaymentWorkRequest pwr = new PaymentWorkRequest();
                    cwr.setInvoiceGenerated(true);
                    pwr.setCollectionWorkRequest(cwr);
                    pwr.setStatus(RequestStatus.getInvoiceStatusMessage(1));
                    pwr.setSender(account);

                    for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e.getName().equals(consumer.getName())) {
                            for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                                if (o instanceof ConsumerManagerOrganization) {
                                    o.getWorkQueue().getWorkRequestList().add(pwr);
                                    break;
                                }
                            }
                        }
                    }

                    // Add to own work queue
                    account.getWorkQueue().getWorkRequestList().add(pwr);

                }
            }
        }
        if (!generated) {
            JOptionPane.showMessageDialog(null, "All invoices already generated", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(null, "All ungenerated invoices are now generated", "Information", JOptionPane.INFORMATION_MESSAGE);
        populateTableDetails(consumer);
    }//GEN-LAST:event_btnGenerateAllActionPerformed

    private void btnGenerateInoviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateInoviceActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDetails.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,
                "Please select a request to generate invoice for",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            CollectionWorkRequest cwr = (CollectionWorkRequest) tblDetails.getValueAt(selectedRow, 1);
            String status = cwr.getStatus();
            if (status.equals(pickupRequestStatusList.get(5)) || status.equals(pickupRequestStatusList.get(6))) {
                if (cwr.getPaid()) {
                    JOptionPane.showMessageDialog(null,
                        "Selected Invoice has already been paid for",
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
                    return;
                }

                if (cwr.getInvoiceGenerated()) {
                    JOptionPane.showMessageDialog(null,
                        "Selected Invoice has already been generated",
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
                    return;
                }

                ConsumerEnterprise consumer = (ConsumerEnterprise) cmbConsumer.getSelectedItem();

                PaymentWorkRequest pwr = new PaymentWorkRequest();
                cwr.setInvoiceGenerated(true);
                pwr.setCollectionWorkRequest(cwr);
                pwr.setStatus(RequestStatus.getInvoiceStatusMessage(1));
                pwr.setSender(account);

                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getName().equals(consumer.getName())) {
                        for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                            if (o instanceof ConsumerManagerOrganization) {
                                o.getWorkQueue().getWorkRequestList().add(pwr);
                                break;
                            }
                        }
                    }
                }

                // Add to own work queue
                account.getWorkQueue().getWorkRequestList().add(pwr);
                JOptionPane.showMessageDialog(null, "Invoice request raised with NGO for further processing", "Information", JOptionPane.INFORMATION_MESSAGE);
                populateTableDetails(consumer);
            } else {
                JOptionPane.showMessageDialog(null,
                    "Request not delivered yet to generate an Invoice for",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnGenerateInoviceActionPerformed

    private void btnAssigntoEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigntoEmployeeActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,
                "Please select a request item to view details",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            CollectionWorkRequest request = (CollectionWorkRequest) tblRequests.getValueAt(selectedRow, 3);
            if (request.getStatus().equals(RequestStatus.getPickupStatusMessage(2))) {
                request.setSender(account);
                request.setStatus(RequestStatus.getPickupStatusMessage(3));
                request.setDeliveredBy((UserAccount) cmbWorker.getSelectedItem());

                // Assign to own queue
                account.getWorkQueue().getWorkRequestList().add(request);

                // Assign to selected worker's queue
                UserAccount acc = (UserAccount) cmbWorker.getSelectedItem();
                acc.getWorkQueue().getWorkRequestList().add(request);

                request.setReceiver(acc);
                JOptionPane.showMessageDialog(null, "Request forwarded to logistics worker", "Information", JOptionPane.INFORMATION_MESSAGE);

                populateTable();
            } else {
                JOptionPane.showMessageDialog(null,
                    "Request not in the proper state to be processed",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnAssigntoEmployeeActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,
                "Please select a request item to view details",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            CollectionWorkRequest request = (CollectionWorkRequest) tblRequests.getValueAt(selectedRow, 3);

            RequestDetails logisticsManagerViewRequestDetailsJPanel = new RequestDetails(mainPanel, request, business);
            mainPanel.add("LogisticsManagerViewRequestDetailsJPanel", logisticsManagerViewRequestDetailsJPanel);
            CardLayout layout = (CardLayout) mainPanel.getLayout();
            layout.next(mainPanel);
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,
                "Please select a request item to view details",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            CollectionWorkRequest request = (CollectionWorkRequest) tblRequests.getValueAt(selectedRow, 4);

            RequestDetails logisticsManagerViewRequestDetailsJPanel = new RequestDetails(mainPanel, request, business);
            mainPanel.add("LogisticsManagerViewRequestDetailsJPanel", logisticsManagerViewRequestDetailsJPanel);
            CardLayout layout = (CardLayout) mainPanel.getLayout();
            layout.next(mainPanel);
        }
    }//GEN-LAST:event_btnViewDetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssigntoEmployee;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnGenerateAll;
    private javax.swing.JButton btnGenerateInovice;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JComboBox cmbConsumer;
    private javax.swing.JComboBox cmbWorker;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblHeader1;
    private javax.swing.JLabel lblHeader2;
    private javax.swing.JLabel lblHeader3;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPaid;
    private javax.swing.JLabel lblPaidVal;
    private javax.swing.JLabel lblUnPaid;
    private javax.swing.JLabel lblUnPaidVal;
    private javax.swing.JLabel lblWorker;
    private javax.swing.JPanel pnlChart;
    private javax.swing.JTable tblDetails;
    private javax.swing.JTable tblRequests;
    private javax.swing.JTable tblRequests1;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblRequests.getModel();
        dtm.setRowCount(0);

        // Display organization's work queue
        for (WorkRequest workRequest : organization.getWorkQueue().getWorkRequestList()) {
            if (workRequest instanceof CollectionWorkRequest) {
                CollectionWorkRequest cwr = (CollectionWorkRequest) workRequest;

                // If status other than newly raised and assigned to Organization, then show
                if (cwr.getStatus().equals(RequestStatus.getPickupStatusMessage(2))) {
                    // if (cwr.getDeliveredToNGO().equals(organization.getName())) {
                    Object row[] = new Object[4];

                    row[0] = cwr.getRaisedBy();
                    row[1] = cwr.getRaisedBySupplier();
                    row[2] = cwr.getDeliverToConsumer();
                    row[3] = cwr;

                    dtm.addRow(row);

                }
                //   } // If status is newly raised by Restaurant, then display
                /*       else {
                    Object row[] = new Object[4];

                    row[0] = cwr.getSender();
                    row[1] = cwr.getRaisedBy();
                    row[2] = cwr.getDeliverTo();
                    row[3] = cwr;

                    dtm.addRow(row);
                }*/
            }
        }

        /*
        // Display own work queue
        for (WorkRequest workRequest : account.getWorkQueue().getWorkRequestList()) {
            if (workRequest instanceof CollectionWorkRequest) {
                CollectionWorkRequest cwr = (CollectionWorkRequest) workRequest;

                Object row[] = new Object[4];

                row[0] = cwr.getSender();
                row[1] = cwr.getRaisedBy();
                row[2] = cwr.getDeliverTo();
                row[3] = cwr;

                dtm.addRow(row);
            }

        } */
    }

    private void populateComboBox() {
        cmbWorker.removeAllItems();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount user : org.getUserAccountDirectory().getUserAccountList()) {
                if (user.getRole().getRoleType().getValue().equals(Role.RoleType.LogisticsWorker.getValue())) {
                    cmbWorker.addItem(user);
                }
            }
        }
    }

    private void populateTableWorkLog() {

        DefaultTableModel dtm = (DefaultTableModel) tblRequests1.getModel();
        dtm.setRowCount(0);

        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : o.getUserAccountDirectory().getUserAccountList()) {
                if (ua.getRole().getRoleType().getValue().equals(Role.RoleType.LogisticsWorker.getValue())) {
                    for (WorkRequest workRequest : ua.getWorkQueue().getWorkRequestList()) {
                        if (workRequest instanceof CollectionWorkRequest) {
                            CollectionWorkRequest cwr = (CollectionWorkRequest) workRequest;

                            Object row[] = new Object[5];

                            row[0] = cwr.getRaisedBy();
                            row[1] = cwr.getRaisedBySupplier();
                            row[2] = cwr.getDeliverToConsumer();
                            row[3] = ua.getEmployee();
                            row[4] = cwr;

                            dtm.addRow(row);
                        }
                    }
                }
            }
        }
    }

    public void populateComboBoxInvoices() {
        cmbConsumer.removeAllItems();
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e.getEnterpriseType().equals(Enterprise.EnterpriseType.Consumer)) {
                cmbConsumer.addItem(e);
            }
        }
    }
    
    public void populateTableDetails(ConsumerEnterprise consumer) {

        DefaultTableModel dtm = (DefaultTableModel) tblDetails.getModel();
        dtm.setRowCount(0);
        for (WorkRequest wr : account.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof CollectionWorkRequest) {
                CollectionWorkRequest cwr = (CollectionWorkRequest) wr;
                if ((cwr.getStatus().equals(pickupRequestStatusList.get(5))) || (cwr.getStatus().equals(pickupRequestStatusList.get(6)))) {
                    if (cwr.getDeliverToConsumer()!= null) {
                        if (cwr.getDeliverToConsumer().equals(consumer.getName())) {
                            Object row[] = new Object[5];
                            row[0] = cwr.getResolveDate();
                            row[1] = cwr;
                            row[2] = "$" + cwr.getDeliveryCost();
                            row[3] = cwr.getInvoiceGenerated() ? "Yes" : "No";
                            row[4] = cwr.getPaid() ? "Yes" : "No";

                            dtm.addRow(row);
                        }
                    }
                }
            }
        }
    }
    
    public void populateChart() {

        DefaultPieDataset dataSet = new DefaultPieDataset();
        int paid = 0, unpaid = 0;
        double paidAmount = 0, unpaidAmount = 0;

        for (WorkRequest wr : account.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof PaymentWorkRequest) {
                PaymentWorkRequest pwr = (PaymentWorkRequest) wr;
                if (pwr.getCollectionWorkRequest().getInvoiceGenerated()) {
                    if (pwr.getCollectionWorkRequest().getPaid()) {
                        paid++;
                        paidAmount += pwr.getCollectionWorkRequest().getDeliveryCost();
                    } else {
                        unpaid++;
                        unpaidAmount += pwr.getCollectionWorkRequest().getDeliveryCost();
                    }
                }
            }
        }

        dataSet.setValue("Paid", paid);
        dataSet.setValue("Unpaid", unpaid);

        JFreeChart chart = ChartFactory.createPieChart("Paid and Unpaid Invoices",
                dataSet, true, true, true);

        PiePlot plot = (PiePlot) chart.getPlot();

        ChartPanel chartPanel = new ChartPanel(chart);
        pnlChart.removeAll();
        pnlChart.add(chartPanel, BorderLayout.CENTER);
        pnlChart.validate();

        lblPaidVal.setText("$ " + paidAmount);
        lblUnPaidVal.setText("$ " + unpaidAmount);

    }

    
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.logistics.manager;

import business.enterprise.ConsumerEnterprise;
import business.enterprise.Enterprise;
import business.network.Network;
import business.organization.Organization;
import business.organization.consumer.ConsumerManagerOrganization;
import business.userAccount.UserAccount;
import business.util.request.RequestStatus;
import static business.util.request.RequestStatus.pickupRequestStatusList;
import business.workQueue.CollectionWorkRequest;
import business.workQueue.PaymentWorkRequest;
import business.workQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author indap.n
 */
public class LogisticsManagerGenerateInvoicesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LogisticsManagerGenerateInvoices
     */
    private JPanel mainPanel;
    private UserAccount account;
    private Network network;

    public LogisticsManagerGenerateInvoicesJPanel(JPanel mainPanel, UserAccount account, Network network) {
        initComponents();
        this.mainPanel = mainPanel;
        this.network = network;
        this.account = account;
        populateComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeader = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        tblDetails = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        cmbConsumer = new javax.swing.JComboBox();
        btnGenerateAll = new javax.swing.JButton();
        btnGenerateInovice = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setMinimumSize(new java.awt.Dimension(1400, 1000));

        lblHeader.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeader.setText("Logistics Manager Work Area - Generate Invoices");

        tblDetails.setBackground(new java.awt.Color(204, 153, 255));
        tblDetails.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job Completion Date", "Request Status", "Cost", "Invoice Generated", "Paid"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(tblDetails);
        if (tblDetails.getColumnModel().getColumnCount() > 0) {
            tblDetails.getColumnModel().getColumn(0).setResizable(false);
            tblDetails.getColumnModel().getColumn(1).setResizable(false);
            tblDetails.getColumnModel().getColumn(2).setResizable(false);
            tblDetails.getColumnModel().getColumn(3).setResizable(false);
            tblDetails.getColumnModel().getColumn(4).setResizable(false);
        }

        btnBack.setBackground(new java.awt.Color(0, 0, 51));
        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(204, 204, 204));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblName.setText("Consumer Name:");

        cmbConsumer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbConsumerActionPerformed(evt);
            }
        });

        btnGenerateAll.setBackground(new java.awt.Color(0, 0, 51));
        btnGenerateAll.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGenerateAll.setForeground(new java.awt.Color(204, 204, 204));
        btnGenerateAll.setText("Generate All Invoices");
        btnGenerateAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateAllActionPerformed(evt);
            }
        });

        btnGenerateInovice.setBackground(new java.awt.Color(0, 0, 51));
        btnGenerateInovice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGenerateInovice.setForeground(new java.awt.Color(204, 204, 204));
        btnGenerateInovice.setText("Generate Invoice");
        btnGenerateInovice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateInoviceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(391, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblHeader)
                        .addGap(383, 383, 383))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbConsumer, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(543, 543, 543))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(203, 203, 203)
                        .addComponent(btnGenerateAll)
                        .addGap(28, 28, 28)
                        .addComponent(btnGenerateInovice)
                        .addGap(369, 369, 369))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(lblHeader)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(cmbConsumer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnGenerateInovice)
                    .addComponent(btnGenerateAll))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    public void populateComboBox() {
        cmbConsumer.removeAllItems();
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e.getEnterpriseType().equals(Enterprise.EnterpriseType.Consumer)) {
                cmbConsumer.addItem(e);
            }
        }
    }


    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        mainPanel.remove(this);
        CardLayout layout = (CardLayout) mainPanel.getLayout();
        layout.previous(mainPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbConsumerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbConsumerActionPerformed
        // TODO add your handling code here:
        ConsumerEnterprise consumer = (ConsumerEnterprise) cmbConsumer.getSelectedItem();
        if (consumer != null) {
            populateTable(consumer);
        }
    }//GEN-LAST:event_cmbConsumerActionPerformed

    private void btnGenerateInoviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateInoviceActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDetails.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,
                    "Please select a request to generate invoice for",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            CollectionWorkRequest cwr = (CollectionWorkRequest) tblDetails.getValueAt(selectedRow, 1);
            String status = cwr.getStatus();
            if (status.equals(pickupRequestStatusList.get(5)) || status.equals(pickupRequestStatusList.get(6))) {
                if (cwr.getPaid()) {
                    JOptionPane.showMessageDialog(null,
                            "Selected Invoice has already been paid for",
                            "Information",
                            JOptionPane.INFORMATION_MESSAGE);
                    return;
                }

                if (cwr.getInvoiceGenerated()) {
                    JOptionPane.showMessageDialog(null,
                            "Selected Invoice has already been generated",
                            "Information",
                            JOptionPane.INFORMATION_MESSAGE);
                    return;
                }

                ConsumerEnterprise consumer = (ConsumerEnterprise) cmbConsumer.getSelectedItem();

                PaymentWorkRequest pwr = new PaymentWorkRequest();
                cwr.setInvoiceGenerated(true);
                pwr.setCollectionWorkRequest(cwr);
                pwr.setStatus(RequestStatus.getInvoiceStatusMessage(1));
                pwr.setSender(account);

                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getName().equals(consumer.getName())) {
                        for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                            if (o instanceof ConsumerManagerOrganization) {
                                o.getWorkQueue().getWorkRequestList().add(pwr);
                                break;
                            }
                        }
                    }
                }

                // Add to own work queue
                account.getWorkQueue().getWorkRequestList().add(pwr);
                JOptionPane.showMessageDialog(null, "Invoice request raised with Consumer for further processing", "Information", JOptionPane.INFORMATION_MESSAGE);
                populateTable(consumer);
            } else {
                JOptionPane.showMessageDialog(null,
                        "Request not delivered yet to generate an Invoice for",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnGenerateInoviceActionPerformed

    private void btnGenerateAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateAllActionPerformed

        ConsumerEnterprise consumer = (ConsumerEnterprise) cmbConsumer.getSelectedItem();
        boolean generated = false;

        for (int i = 0; i < tblDetails.getRowCount(); i++) {
            WorkRequest wr = (WorkRequest) tblDetails.getValueAt(i, 1);
            if (wr instanceof CollectionWorkRequest) {
                CollectionWorkRequest cwr = (CollectionWorkRequest) wr;
                if (!cwr.getPaid() && !cwr.getInvoiceGenerated()) {
                    generated = true;

                    PaymentWorkRequest pwr = new PaymentWorkRequest();
                    cwr.setInvoiceGenerated(true);
                    pwr.setCollectionWorkRequest(cwr);
                    pwr.setStatus(RequestStatus.getInvoiceStatusMessage(1));
                    pwr.setSender(account);

                    for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e.getName().equals(consumer.getName())) {
                            for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                                if (o instanceof ConsumerManagerOrganization) {
                                    o.getWorkQueue().getWorkRequestList().add(pwr);
                                    break;
                                }
                            }
                        }
                    }

                    // Add to own work queue
                    account.getWorkQueue().getWorkRequestList().add(pwr);

                }
            }
        }
        if (!generated) {
            JOptionPane.showMessageDialog(null, "All invoices already generated", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(null, "All ungenerated invoices are now generated", "Information", JOptionPane.INFORMATION_MESSAGE);
        populateTable(consumer);
    }//GEN-LAST:event_btnGenerateAllActionPerformed

    public void populateTable(ConsumerEnterprise consumer) {

        DefaultTableModel dtm = (DefaultTableModel) tblDetails.getModel();
        dtm.setRowCount(0);
        for (WorkRequest wr : account.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof CollectionWorkRequest) {
                CollectionWorkRequest cwr = (CollectionWorkRequest) wr;
                if ((cwr.getStatus().equals(pickupRequestStatusList.get(5))) || (cwr.getStatus().equals(pickupRequestStatusList.get(6)))) {
                    if (cwr.getDeliverToConsumer() != null) {
                        if (cwr.getDeliverToConsumer().equals(consumer.getName())) {
                            Object row[] = new Object[5];
                            row[0] = cwr.getResolveDate();
                            row[1] = cwr;
                            row[2] = "$" + cwr.getDeliveryCost();
                            row[3] = cwr.getInvoiceGenerated() ? "Yes" : "No";
                            row[4] = cwr.getPaid() ? "Yes" : "No";

                            dtm.addRow(row);
                        }
                    }
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnGenerateAll;
    private javax.swing.JButton btnGenerateInovice;
    private javax.swing.JComboBox cmbConsumer;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblName;
    private javax.swing.JTable tblDetails;
    // End of variables declaration//GEN-END:variables
}

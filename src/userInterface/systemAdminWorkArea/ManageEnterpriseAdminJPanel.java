/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.systemAdminWorkArea;

import business.EcoSystem;
import business.employee.Employee;
import business.enterprise.Enterprise;
import business.network.Network;
import business.role.Role;
import business.role.consumer.ConsumerAdminRole;
import business.role.logistics.LogisticsAdminRole;
import business.role.supervision.SupervisionAdminRole;
import business.role.supplier.SupplierAdminRole;
import business.userAccount.UserAccount;
import business.util.mail.Mail;
import business.util.validation.Validation;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import userInterface.consumer.manager.ConsumerSupplierRequestViewJPanel;
import userInterface.snapshot.Snapshot;

/**
 *
 * @author rebeccabiju
 */
public class ManageEnterpriseAdminJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    Snapshot snapshot;
    /**
     * Creates new form ManagerEnterpriseAdminJPanel
     */
    String selectedImagePath = File.separator+"Users"+File.separator+"rebeccabiju"+File.separator+"Downloads"+File.separator+"noImg.jpeg";
    
    String operation;
    UserAccount selectedPerson;
    
    
    public ManageEnterpriseAdminJPanel(JPanel userProcessContainer, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;

        populateTable();
        populateNetworkComboBox();
        
        btnUpdate.setVisible(false);
//        btnDelete.setVisible(false);
        btnSave.setVisible(false);
        btnCancel.setVisible(false);
        
        toggleEditablePerson(false, Color.LIGHT_GRAY);
        clearDataPerson();
        btnCancel.setVisible(false);
        btnDelete.setVisible(false);
        
        toggleCombo(false);
        lblImage.setVisible(true);
        btnBrowse.setVisible(false);
        
        txtName.setVisible(false);
        lblName.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        tblEnterprise = new javax.swing.JTable();
        jSeparator = new javax.swing.JSeparator();
        lblNetwork = new javax.swing.JLabel();
        cmbNetwork = new javax.swing.JComboBox();
        lblEnterprise = new javax.swing.JLabel();
        cmbEnterprise = new javax.swing.JComboBox();
        lblUserName = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lblHeader = new javax.swing.JLabel();
        lblNetworkList = new javax.swing.JLabel();
        lblCreateNetwork = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblMobileNo = new javax.swing.JLabel();
        txtMobileNo = new javax.swing.JTextField();
        lblPassword1 = new javax.swing.JLabel();
        btnBrowse = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnSnapshot = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 204, 204));
        setMinimumSize(new java.awt.Dimension(800, 800));
        setPreferredSize(new java.awt.Dimension(800, 800));

        tblEnterprise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Enterprise Name", "Network"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(tblEnterprise);

        lblNetwork.setText("Network");

        cmbNetwork.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbNetworkActionPerformed(evt);
            }
        });

        lblEnterprise.setText("Enterprise");

        cmbEnterprise.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblUserName.setText("Username");

        lblPassword.setText("Password");

        lblName.setText("Name");

        btnBack.setText("<<BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblHeader.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeader.setText("System Admin Work Area - Create Enterprise Admin");

        lblNetworkList.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblNetworkList.setText("Enterprise admin list:");

        lblCreateNetwork.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCreateNetwork.setText("Create New Enterprise:");

        lblEmail.setText("Email");

        lblMobileNo.setText("Phone Number");

        lblPassword1.setText("Profile Image:");

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        lblImage.setBorder(new javax.swing.border.MatteBorder(null));

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSnapshot.setText("Snapshot");
        btnSnapshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSnapshotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblUserName)
                                .addGap(52, 52, 52)
                                .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPassword)
                                    .addComponent(lblName))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNetwork)
                                    .addComponent(lblEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cmbEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbNetwork, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnNew)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(9, 9, 9)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblMobileNo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(157, 157, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(lblPassword1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBrowse)
                                .addGap(18, 18, 18)
                                .addComponent(btnSnapshot)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(458, 458, 458)
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblHeader)
                            .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNetworkList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(lblCreateNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBack, btnBrowse, btnCancel, btnDelete, btnNew, btnSave, btnSnapshot, btnUpdate, btnView, cmbEnterprise, cmbNetwork, lblEmail, lblEnterprise, lblMobileNo, lblName, lblNetwork, lblPassword, lblPassword1, lblUserName, txtEmail, txtMobileNo, txtName, txtPassword, txtUserName});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(lblNetworkList)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCreateNetwork)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNetwork)
                    .addComponent(cmbNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMobileNo)
                        .addComponent(txtMobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbEnterprise, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblEnterprise)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUserName)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(149, 149, 149))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword1)
                            .addComponent(btnBrowse)
                            .addComponent(btnSnapshot))
                        .addGap(36, 36, 36)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnBack)
                    .addComponent(btnNew)
                    .addComponent(btnView)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnCancel))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBack, btnBrowse, btnCancel, btnDelete, btnNew, btnSave, btnSnapshot, btnUpdate, btnView, cmbEnterprise, cmbNetwork, lblEmail, lblEnterprise, lblMobileNo, lblName, lblNetwork, lblPassword, lblPassword1, lblUserName, txtEmail, txtMobileNo, txtName, txtPassword, txtUserName});

    }// </editor-fold>//GEN-END:initComponents

    private void cmbNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbNetworkActionPerformed

        Network network = (Network) cmbNetwork.getSelectedItem();
        if (network != null) {
            populateEnterpriseComboBox(network);
        }

    }//GEN-LAST:event_cmbNetworkActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
//        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        Enterprise enterprise = (Enterprise) cmbEnterprise.getSelectedItem();
        
        if (enterprise == null) {
                JOptionPane.showMessageDialog(null, "Invalid input!");
        }
            

        String userName = null;
        if (Validation.validateStringInput(txtUserName)) {
            userName = txtUserName.getText();
        } else {
            return;
        }

//        String name = null;
//        if (Validation.validateStringInput(txtName)) {
//            userName = txtUserName.getText();
//        } else {
//            return;
//        }
        
        String email = null;
        if(Validation.validateEmailInput(txtEmail)){
            email = txtEmail.getText();
        } else {
            return;
        }

       long mobileNo = 0;
        if (Validation.validateNumericalInput(txtMobileNo, 3) && Validation.validatePhoneNumber(txtMobileNo)) {
            mobileNo = Long.parseLong(txtMobileNo.getText());
        } else {
            return;
        }

        char[] passChar = txtPassword.getPassword();
        if (passChar == null || passChar.length == 0) {
            JOptionPane.showMessageDialog(null,
                    "Password cannot be blank",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE);
            txtPassword.setBackground(Color.RED);
            return;
        }
        
        if(snapshot.getPath()!=null){
            selectedImagePath = snapshot.getPath();
        }
        UserAccount account = new UserAccount();

        String password = account.encodePassword(String.valueOf(passChar));
        
        if(operation.equals("Update")){

            selectedPerson.setPassword(password);
            selectedPerson.setMobileNo(mobileNo);
            selectedPerson.setEmail(email);
//            Employee selectedEmployee = selectedPerson.getEmployee();
//            selectedEmployee.setName(name);
            if(selectedImagePath!=null)
                selectedPerson.setImgPath(selectedImagePath);
             }
        
            if(operation.equals("New")){
                if (business.checkIfUserNameIsUnique(userName)) {
                    JOptionPane.showMessageDialog(null, "User name already exists. Please select a different one.");
                    return;
                }

                Employee employee = enterprise.getEmployeeDirectory().addEmployee(userName);


                if (null != enterprise.getEnterpriseType()) {
                    switch (enterprise.getEnterpriseType()) {
                        case Logistics:
                            account = enterprise.getUserAccountDirectory().addUserAccount(userName, password, employee, (Role) new LogisticsAdminRole(), email, mobileNo, selectedImagePath);
                            Mail.sendMail(email, "Welcome to Emporium!", "You have sucessfully registered to Emporium. Now manage second hand goods effeciently!");
                            break;
                        case Consumer:
                            account = enterprise.getUserAccountDirectory().addUserAccount(userName, password, employee, (Role) new ConsumerAdminRole(), email, mobileNo, selectedImagePath);
                            break;
                        case Supplier:
                            account = enterprise.getUserAccountDirectory().addUserAccount(userName, password, employee, (Role) new SupplierAdminRole(), email, mobileNo, selectedImagePath);
                            break;
                        case Supervision:
                            account = enterprise.getUserAccountDirectory().addUserAccount(userName, password, employee, (Role) new SupervisionAdminRole(), email, mobileNo, selectedImagePath);
                            break;
                        default:
                          
                        break;
                    }
                    Mail.sendMail(email, "Welcome to Emporium!", "You have sucessfully registered to Emporium. Now manage second hand goods effeciently!");
                }

            JOptionPane.showMessageDialog(null, "Enterprise admin added successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
        }

        

        clearDataPerson();
        populateTable();
        btnSave.setVisible(false);
        btnView.setVisible(true);
        btnNew.setVisible(true);
        btnCancel.setVisible(false);
        btnUpdate.setVisible(false);
        tblEnterprise.setEnabled(true);
        btnBrowse.setVisible(false);
        cmbEnterprise.setEnabled(true);
        cmbNetwork.setEnabled(true);
        txtUserName.setEnabled(true);
        toggleCombo(false);
//        selectedImagePath = "";
        toggleEditablePerson(false, Color.LIGHT_GRAY);

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        JFileChooser browseImageFile = new JFileChooser();
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("IMAGES", "png", "jpg", "jpeg");
        browseImageFile.addChoosableFileFilter(fnef);
        browseImageFile.setAcceptAllFileFilterUsed(false);
        int showOpenDialogue = browseImageFile.showOpenDialog(null);

        if (showOpenDialogue == JFileChooser.APPROVE_OPTION) {
            File selectedImageFile = browseImageFile.getSelectedFile();
            selectedImagePath = selectedImageFile.getAbsolutePath();
            JOptionPane.showMessageDialog(null, selectedImagePath);

        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        operation="New";
        clearDataPerson();
        toggleCombo(true);
        btnNew.setVisible(false);
        btnView.setVisible(false);
        btnBrowse.setVisible(true);
        btnSave.setVisible(true);
        btnCancel.setVisible(true);
        cmbNetwork.setEnabled(true);
        cmbEnterprise.setEnabled(true);
        toggleEditablePerson(true, Color.WHITE);

        //        lblImage.setVisible(false);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        lblImage.setVisible(true);
        int selectedRowIndex = tblEnterprise.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to display data");
            return;
        }
        //
        DefaultTableModel model = (DefaultTableModel)tblEnterprise.getModel();
        selectedPerson = (UserAccount) model.getValueAt(selectedRowIndex, 0);
        //

        txtUserName.setText(selectedPerson.getUsername());
        txtMobileNo.setText(Long.toString(selectedPerson.getMobileNo()));
        txtEmail.setText(selectedPerson.getEmail());
        System.out.println("Selected Employee: "+ selectedPerson.getEmployee().getName());

//        txtName.setText(selectedPerson.getEmployee().getName());

//        cmbEmployee.addItem(selectedPerson.getEmployee().getName());
//        cmbRole.addItem(selectedPerson.getRole().getRoleType());

        ImageIcon imgIcon = new ImageIcon(selectedPerson.getImgPath());
        
        System.out.println(selectedPerson.getImgPath()+""+lblImage.getWidth()+""+lblImage.getHeight());
        Image img =imgIcon.getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);

        lblImage.setIcon(new ImageIcon(img));
        btnBrowse.setVisible(false);

        //        System.out.println(selectedPerson.getEmployee().getName());
        //        txtPassword.setText(selectedPerson.getPassword());
        //
        //Make Text fields uneditable
        toggleEditablePerson(false, Color.LIGHT_GRAY);
        btnUpdate.setVisible(true);
        toggleCombo(false);
        //        btnDelete.setVisible(true);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        operation="Update";
        selectedImagePath = null;
        int selectedRowIndex = tblEnterprise.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a person to update data");
            return;
        }

        DefaultTableModel model = (DefaultTableModel)tblEnterprise.getModel();
        selectedPerson = (UserAccount) model.getValueAt(selectedRowIndex, 0);

        //Populate in combobox
//        cmbEmployee.addItem(selectedPerson.getEmployee().getName());
//        cmbRole.addItem(selectedPerson.getRole().getRoleType());
        toggleEditablePerson(true, Color.WHITE);
        txtUserName.setEnabled(false);
        cmbNetwork.setEnabled(false);
        cmbEnterprise.setEnabled(false);
        btnSave.setVisible(true);
        btnBrowse.setVisible(true);
        btnCancel.setVisible(true);
        tblEnterprise.setEnabled(false);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //        int selectedRowIndex = tblPerson.getSelectedRow();
        //        if(selectedRowIndex<0){
            //            JOptionPane.showMessageDialog(this, "Please select a row to delete data");
            //            return;
            //        }
        //
        //        DefaultTableModel model = (DefaultTableModel)tblPerson.getModel();
        //        selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        //        String username = selectedPerson.getUsername();
        //        User user = userDir.getUserByUsername(username);
        //        if(user.getRole().equals("patient")){
            //            Patient patient = patientDir.getPatientByUsername(username);
            //            patientDir.deletePatient(patient);
            //        }
        //        if(user.getRole().equals("doctor")){
            //            Doctor doctor = doctorDir.getDoctorByUsername(username);
            //            doctorDir.deleteDoctor(doctor);
            //        }
        //
        //        personDir.deletePerson(selectedPerson);
        //        userDir.deleteUser(user);
        //
        //        JOptionPane.showMessageDialog(this, "Person data deleted");
        //        //
        //        populateTablePerson();
        //        clearDataPerson();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        btnNew.setVisible(true);
        btnBrowse.setVisible(false);
        btnView.setVisible(true);
        btnSave.setVisible(false);
        btnUpdate.setVisible(false);
        btnDelete.setVisible(false);
        btnCancel.setVisible(false);
        txtUserName.setEnabled(true);
        tblEnterprise.setEnabled(true);
        cmbNetwork.setEnabled(true);
        cmbEnterprise.setEnabled(true);
        clearDataPerson();
        toggleEditablePerson(false, Color.LIGHT_GRAY);
        toggleCombo(false);
        
        //        cmbRole.setSelectedIndex(0);
        //        cmbEmployee.setSelectedIndex(0);
        //        cmbOrganiztion.setSelectedIndex(0);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSnapshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSnapshotActionPerformed
        // TODO add your handling code here:
        snapshot = new Snapshot(userProcessContainer);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("snapshot", snapshot);
        layout.next(userProcessContainer);
//        selectedImagePath = snapshot.getPath();
        System.out.println("Selected Image: "+ selectedImagePath);
    }//GEN-LAST:event_btnSnapshotActionPerformed

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblEnterprise.getModel();
        dtm.setRowCount(0);
        for (Network network : business.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[3];
                    row[0] = userAccount;
                    row[1] = enterprise.getName();
                    row[2] = network.getName();

                    dtm.addRow(row);
                }
            }
        }
    }

    private void populateNetworkComboBox() {
        cmbNetwork.removeAllItems();

        for (Network network : business.getNetworkList()) {
            cmbNetwork.addItem(network);
        }
    }

    private void populateEnterpriseComboBox(Network network) {
        cmbEnterprise.removeAllItems();

        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            cmbEnterprise.addItem(enterprise);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSnapshot;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cmbEnterprise;
    private javax.swing.JComboBox cmbNetwork;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JLabel lblCreateNetwork;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblMobileNo;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNetwork;
    private javax.swing.JLabel lblNetworkList;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPassword1;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTable tblEnterprise;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMobileNo;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    //Clear User Data
    private void clearDataPerson() {
        //Clear past info
        txtUserName.setText("");
        txtPassword.setText("");
        txtMobileNo.setText("");
        txtEmail.setText("");
        txtName.setText("");
        if(lblImage.getWidth()!= 0 && lblImage.getHeight()!=0){
            ImageIcon imgIcon = new ImageIcon("");
        Image img =imgIcon.getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
        lblImage.setIcon(new ImageIcon(img));
        }
        
//        txtStreetNo.setText("");
//        txtCommunityName.setText("");
//        txtCityName.setText("");
//        txtZipCode.setText("");
    }
    
    private void toggleEditablePerson(boolean b, Color bg) {
        txtUserName.setEditable(b);
        txtUserName.setBackground(bg);
        
        txtPassword.setEditable(b);
        txtPassword.setBackground(bg);
        
        txtMobileNo.setEditable(b);
        txtMobileNo.setBackground(bg);
        
        txtEmail.setEditable(b);
        txtEmail.setBackground(bg);
        
        txtName.setEditable(b);
        txtName.setBackground(bg);
    }
    
    private void toggleCombo(boolean b) {
        cmbEnterprise.setEditable(b);
        cmbNetwork.setEditable(b);
        
    }
}
